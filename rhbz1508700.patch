commit 589859d308fdb750ef10a7dadb06680a35045595
Author: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Date:   Thu Sep 21 10:09:44 2017 -0500

    Fix PR22155 by avoiding a kernel panic.
    
    * runtime/linux/task_finder.c (__stp_call_mmap_callbacks_for_task):
      Instead of a 'struct path' pointer, store the 'struct path' structure
      itself in vma_cache_t.
    * runtime/linux/task_finder2.c: Ditto.

diff --git a/runtime/linux/task_finder.c b/runtime/linux/task_finder.c
index c91cb12..69c27fe 100644
--- a/runtime/linux/task_finder.c
+++ b/runtime/linux/task_finder.c
@@ -1179,7 +1179,7 @@ __stp_call_mmap_callbacks_for_task(struct stap_task_finder_target *tgt,
 	int file_based_vmas = 0;
 	struct vma_cache_t {
 #ifdef STAPCONF_DPATH_PATH
-		struct path *f_path;
+		struct path f_path;
 #else
 		struct vfsmount *f_vfsmnt;
 #endif
@@ -1238,8 +1238,8 @@ __stp_call_mmap_callbacks_for_task(struct stap_task_finder_target *tgt,
 			    // Notice we're increasing the reference
 			    // count for 'f_path'.  This way it won't
 			    // get deleted from out under us.
-			    vma_cache_p->f_path = &(vma->vm_file->f_path);
-			    path_get(vma_cache_p->f_path);
+			    vma_cache_p->f_path = vma->vm_file->f_path;
+			    path_get(&vma_cache_p->f_path);
 			    vma_cache_p->dentry = vma->vm_file->f_path.dentry;
 #else
 			    // Notice we're increasing the reference
@@ -1275,9 +1275,9 @@ __stp_call_mmap_callbacks_for_task(struct stap_task_finder_target *tgt,
 		vma_cache_p = vma_cache;
 		for (i = 0; i < file_based_vmas; i++) {
 #ifdef STAPCONF_DPATH_PATH
-			mmpath = d_path(vma_cache_p->f_path, mmpath_buf,
+			mmpath = d_path(&vma_cache_p->f_path, mmpath_buf,
 					PATH_MAX);
-			path_put(vma_cache_p->f_path);
+			path_put(&vma_cache_p->f_path);
 #else
 			mmpath = d_path(vma_cache_p->dentry,
 					vma_cache_p->f_vfsmnt, mmpath_buf,
diff --git a/runtime/linux/task_finder2.c b/runtime/linux/task_finder2.c
index 41c6871..6afb3bd 100644
--- a/runtime/linux/task_finder2.c
+++ b/runtime/linux/task_finder2.c
@@ -1119,7 +1119,7 @@ __stp_call_mmap_callbacks_for_task(struct stap_task_finder_target *tgt,
 	int file_based_vmas = 0;
 	struct vma_cache_t {
 #ifdef STAPCONF_DPATH_PATH
-		struct path *f_path;
+		struct path f_path;
 #else
 		struct vfsmount *f_vfsmnt;
 #endif
@@ -1178,8 +1178,8 @@ __stp_call_mmap_callbacks_for_task(struct stap_task_finder_target *tgt,
 			    // Notice we're increasing the reference
 			    // count for 'f_path'.  This way it won't
 			    // get deleted from out under us.
-			    vma_cache_p->f_path = &(vma->vm_file->f_path);
-			    path_get(vma_cache_p->f_path);
+			    vma_cache_p->f_path = vma->vm_file->f_path;
+			    path_get(&vma_cache_p->f_path);
 			    vma_cache_p->dentry = vma->vm_file->f_path.dentry;
 #else
 			    // Notice we're increasing the reference
@@ -1215,9 +1215,9 @@ __stp_call_mmap_callbacks_for_task(struct stap_task_finder_target *tgt,
 		vma_cache_p = vma_cache;
 		for (i = 0; i < file_based_vmas; i++) {
 #ifdef STAPCONF_DPATH_PATH
-			mmpath = d_path(vma_cache_p->f_path, mmpath_buf,
+			mmpath = d_path(&vma_cache_p->f_path, mmpath_buf,
 					PATH_MAX);
-			path_put(vma_cache_p->f_path);
+			path_put(&vma_cache_p->f_path);
 #else
 			mmpath = d_path(vma_cache_p->dentry,
 					vma_cache_p->f_vfsmnt, mmpath_buf,
