commit 9267aefb7e7612c04eaf886683b204415e91d772
Author: Jonathan Lebon <jlebon@redhat.com>
Date:   Wed May 28 11:24:34 2014 -0400

    BZ1099472: cast-scope.exp: adjust relative lineno

diff --git a/testsuite/systemtap.base/cast-scope.cxx b/testsuite/systemtap.base/cast-scope.cxx
index 428124d..891bfbe 100644
--- a/testsuite/systemtap.base/cast-scope.cxx
+++ b/testsuite/systemtap.base/cast-scope.cxx
@@ -8,7 +8,7 @@ length(const std::string& str)
     int res, r;
     STAP_PROBE1(cast-scope, length, &str);
     r = str.length() * 2;
-    STAP_PROBE(cast-scope, dummy); /* Just here to probe line +4. */
+    STAP_PROBE(cast-scope, dummy); /* Just here to probe line +5. */
     res = r / 2;
     STAP_PROBE(cast-scope, dummy2); /* Just here prevent line reordering. */
     return res;
diff --git a/testsuite/systemtap.base/cast-scope.stp b/testsuite/systemtap.base/cast-scope.stp
index aadb988..6cdd4ce 100644
--- a/testsuite/systemtap.base/cast-scope.stp
+++ b/testsuite/systemtap.base/cast-scope.stp
@@ -6,7 +6,7 @@ probe process.function("length@cast-scope.cxx")
   function_string .= sprintf("function cast: %s\n", @cast($str, "std::string")$$)
 }
 
-probe process.statement("length@cast-scope.cxx+4")
+probe process.statement("length@cast-scope.cxx+5")
 {
   statement_string .= sprintf("statement direct: %s\n", $str$$)
   statement_string .= sprintf("statement cast: %s\n", @cast($str, "std::string")$$)

commit 10bada5493a4f19be9cf11c866aceda71782d63c
Author: Jonathan Lebon <jlebon@redhat.com>
Date:   Tue Jun 10 13:41:28 2014 -0400

    loc2c: make u_fetch_register() respect CONFIG_COMPAT
    
    If CONFIG_COMPAT is defined, then it is possible to be running 32/31-bit
    tasks on a 64-bit kernel. In such cases, we need to ensure that the
    values returned from u_fetch_register() are 32-bit friendly.
    
    Thus, we mask whatever pt_regs_fetch_register() returns.

diff --git a/runtime/linux/loc2c-runtime.h b/runtime/linux/loc2c-runtime.h
index c847b47..a3bec58 100644
--- a/runtime/linux/loc2c-runtime.h
+++ b/runtime/linux/loc2c-runtime.h
@@ -271,13 +271,25 @@ static void ursl_store64 (const struct usr_regset_lut* lut,unsigned lutsize,  in
 #endif
 
 #else /* ! STAPCONF_REGSET */
+
 /* Downgrade to pt_dwarf_register access. */
-#define u_fetch_register(regno) \
-  pt_regs_fetch_register(c->uregs, regno)
+
 #define u_store_register(regno, value) \
   pt_regs_store_register(c->uregs, regno, value)
+
+/* If we're in a 32/31-bit task in a 64-bit kernel, we need to emulate
+ * 32-bitness by masking the output of pt_regs_fetch_register() */
+#ifndef CONFIG_COMPAT
+#define u_fetch_register(regno) \
+  pt_regs_fetch_register(c->uregs, regno)
+#else
+#define u_fetch_register(regno) \
+  (_stp_is_compat_task() ? (0xffffffff & pt_regs_fetch_register(c->uregs, regno)) \
+                         : pt_regs_fetch_register(c->uregs, regno))
 #endif
 
+#endif /* STAPCONF_REGSET */
+
 
 /* The deref and store_deref macros are called to safely access addresses
    in the probe context.  These macros are used only for kernel addresses.

commit 855c22e91e76e05a3b57df545fb9d28677dd2c10
Author: Jonathan Lebon <jlebon@redhat.com>
Date:   Tue Jun 10 14:57:39 2014 -0400

    cast-scope.exp: KFAIL dyninst on ppc unoptimized
    
    The cast-scope.exp test fails on ppc64 for unoptimized code due to
    stapdyn's inability to retrieve all registers (PR15614). So we KFAIL it.

diff --git a/testsuite/lib/compile_flags.exp b/testsuite/lib/compile_flags.exp
index 2893978..f7e2ac5 100644
--- a/testsuite/lib/compile_flags.exp
+++ b/testsuite/lib/compile_flags.exp
@@ -67,6 +67,11 @@ proc all_compile_flag_native_p { INDEX } {
   return 0
 }
 
+# Is INDEX a configuration with optimization turned on?
+proc all_compile_flag_optimized_p { INDEX } {
+  return [expr (($INDEX / 2) % 3) > 0]
+}
+
 # Additional compile flag to use for with target_compile.
 # Given INDEX starts at zero and should be smaller than the number
 # returned by all_compile_flags.
diff --git a/testsuite/systemtap.base/cast-scope.exp b/testsuite/systemtap.base/cast-scope.exp
index 8af0eaa..47f87a9 100644
--- a/testsuite/systemtap.base/cast-scope.exp
+++ b/testsuite/systemtap.base/cast-scope.exp
@@ -9,11 +9,20 @@ set srcfile "$srcdir/$subdir/$test.cxx"
 set stpfile "$srcdir/$subdir/$test.stp"
 
 proc dyninst_kfails {index} {
+
     # The dyninst runtime isn't multi-arch, it only works on the
     # native architecture. PR14490.
     if {! [all_compile_flag_native_p $index]} {
 	setup_kfail 14490 "*-*-*"
     }
+
+    # On ppc, stapdyn does not retrieve all registers, causing
+    # various failures (such as the inability to retrieve DWARF
+    # vars in unoptimized code). PR15614.
+    if {[string match ppc* $::tcl_platform(machine)] && \
+        ![all_compile_flag_optimized_p $index]} {
+	setup_kfail 15614 "*-*-*"
+    }
 }
 
 for {set i 0} {$i < [all_compile_flags]} {incr i} {
