commit 1dfff0a792aa0e750094aa9642ae8f4991e7e292
Author: Jonathan Lebon <jlebon@redhat.com>
Date:   Thu May 1 16:31:59 2014 -0400

    cmd_file(): only free words if succeeded
    
    Otherwise, we may accidentally summon Cthulhu.

diff --git a/session.cxx b/session.cxx
index 3b968782cacd..f457829a6036 100644
--- a/session.cxx
+++ b/session.cxx
@@ -1773,8 +1773,10 @@ systemtap_session::cmd_file ()
   int rc = wordexp (cmd.c_str (), &words, WRDE_NOCMD|WRDE_UNDEF);
   string file;
   if(rc == 0 && words.we_wordc > 0)
-    file = words.we_wordv[0];
-  wordfree (& words);
+    {
+      file = words.we_wordv[0];
+      wordfree (& words);
+    }
   return file;
 }
 

commit eb94071d6ed22ae8777f60e67ca5771bc5201093
Author: Jonathan Lebon <jlebon@redhat.com>
Date:   Thu May 1 16:43:09 2014 -0400

    cmd_file(): properly free the words array
    
    We should free it regardless if rc > 0.

diff --git a/session.cxx b/session.cxx
index f457829a6036..c51f3c9bfe45 100644
--- a/session.cxx
+++ b/session.cxx
@@ -1772,9 +1772,10 @@ systemtap_session::cmd_file ()
   wordexp_t words;
   int rc = wordexp (cmd.c_str (), &words, WRDE_NOCMD|WRDE_UNDEF);
   string file;
-  if(rc == 0 && words.we_wordc > 0)
+  if(rc == 0)
     {
-      file = words.we_wordv[0];
+      if (words.we_wordc > 0)
+        file = words.we_wordv[0];
       wordfree (& words);
     }
   return file;

commit fc18e6c49eb6b3c84075253b2935623d44f3cf71
Author: Jonathan Lebon <jlebon@redhat.com>
Date:   Fri May 2 09:43:07 2014 -0400

    PR16894: give better errors re. -c commands
    
    This patch allows SystemTap to make the distinction when reporting an
    error between no -c command given, and a given but invalid -c command.
    
    - man/stapprobes.3stap: introduce 'unspecified' verbiage and clear up
      restrictions on unspecified process probes
    - session.cxx: cmd_file() now throws errors upon wordexp() failures
    - tapsets.cxx: (1) handle possibility of error from cmd_file() and chain
                       with own error if it occurs
                   (2) separately handle no -c command / empty file
                   (3) introduce 'unspecified' verbiage in error messages
                       and point to [man stapprobes]
    - tapset-perfmon.cxx: ditto

diff --git a/man/stapprobes.3stap b/man/stapprobes.3stap
index f2be450ff67c..36f059282514 100644
--- a/man/stapprobes.3stap
+++ b/man/stapprobes.3stap
@@ -753,11 +753,14 @@ threads will be probed.  However, if systemtap was invoked with the
 .IR \-c " or " \-x
 options, then process probes are restricted to the process
 hierarchy associated with the target process.  If a process probe is
-specified without a PID or FULLPATH, but with the 
+unspecified (i.e. without a PID or FULLPATH), but with the
 .IR \-c "
 option, the PATH of the
 .IR \-c "
-cmd will be heuristically filled into the process PATH.
+cmd will be heuristically filled into the process PATH. In that case,
+only command parameters are allowed in the \fI-c\fR command (i.e. no
+command substitution allowed and no occurrences of any of these
+characters: '|&;<>(){}').
 
 .PP
 Third, symbolic static instrumentation compiled into programs and
diff --git a/session.cxx b/session.cxx
index c51f3c9bfe45..3b797cde7b10 100644
--- a/session.cxx
+++ b/session.cxx
@@ -1778,6 +1778,24 @@ systemtap_session::cmd_file ()
         file = words.we_wordv[0];
       wordfree (& words);
     }
+  else
+    {
+      switch (rc)
+        {
+        case WRDE_BADCHAR:
+          throw SEMANTIC_ERROR(_("command contains illegal characters"));
+        case WRDE_BADVAL:
+          throw SEMANTIC_ERROR(_("command contains undefined shell variables"));
+        case WRDE_CMDSUB:
+          throw SEMANTIC_ERROR(_("command contains command substitutions"));
+        case WRDE_NOSPACE:
+          throw SEMANTIC_ERROR(_("out of memory"));
+        case WRDE_SYNTAX:
+          throw SEMANTIC_ERROR(_("command contains shell syntax errors"));
+        default:
+          throw SEMANTIC_ERROR(_("unspecified wordexp failure"));
+        }
+    }
   return file;
 }
 
diff --git a/tapset-perfmon.cxx b/tapset-perfmon.cxx
index 2d9b6555be1a..f0880e80d356 100644
--- a/tapset-perfmon.cxx
+++ b/tapset-perfmon.cxx
@@ -323,9 +323,18 @@ perf_builder::build(systemtap_session & sess,
   string proc_n;
   if ((proc_p = has_null_param(parameters, TOK_PROCESS)))
     {
-      proc_n = sess.cmd_file();
+      try
+        {
+          proc_n = sess.cmd_file();
+        }
+      catch (semantic_error& e)
+        {
+          throw SEMANTIC_ERROR(_("invalid -c command for unspecified process"
+                                 " probe [man stapprobes]"), NULL, NULL, &e);
+        }
       if (proc_n.empty())
-	throw SEMANTIC_ERROR(_("process probe is invalid without a -c COMMAND"));
+	throw SEMANTIC_ERROR(_("unspecified process probe is invalid without a "
+                               "-c COMMAND [man stapprobes]"));
     }
   else
     proc_p = get_param(parameters, TOK_PROCESS, proc_n);
diff --git a/tapsets.cxx b/tapsets.cxx
index 8d074d15e15b..ec5047f53903 100644
--- a/tapsets.cxx
+++ b/tapsets.cxx
@@ -7168,9 +7168,19 @@ dwarf_builder::build(systemtap_session & sess,
       module_name = sess.sysroot + module_name;
       if(has_null_param(filled_parameters, TOK_PROCESS))
         {
-	  const string &file = sess.cmd_file();
+          string file;
+          try
+            {
+              file = sess.cmd_file();
+            }
+          catch (const semantic_error& e)
+            {
+              throw SEMANTIC_ERROR(_("invalid -c command for unspecified process"
+                                     " probe [man stapprobes]"), NULL, NULL, &e);
+            }
           if(file.empty())
-            throw SEMANTIC_ERROR(_("process probe is invalid without a -c COMMAND"));
+            throw SEMANTIC_ERROR(_("unspecified process probe is invalid without"
+                                   " a -c COMMAND [man stapprobes]"));
           module_name = sess.sysroot + file;
           filled_parameters[TOK_PROCESS] = new literal_string(module_name);// this needs to be used in place of the blank map
           // in the case of TOK_MARK we need to modify locations as well

commit 1922e1acf2c08afa8afd0f43c025fd880cbe66fd
Author: Jonathan Lebon <jlebon@redhat.com>
Date:   Fri May 2 10:19:06 2014 -0400

    PR16894: new wordexp.exp to check -c COMMAND handling
    
    This simple testcase checks that invalid -c COMMANDs for unspecified
    process probes are properly handled (e.g. prior to commit eb94071, we
    segfaulted).

diff --git a/testsuite/systemtap.base/wordexp.exp b/testsuite/systemtap.base/wordexp.exp
new file mode 100644
index 000000000000..0fcb22f2fb2c
--- /dev/null
+++ b/testsuite/systemtap.base/wordexp.exp
@@ -0,0 +1,45 @@
+set test "wordexp"
+
+# Makes sure SystemTap gracefully handles various -c failures.
+
+proc expect_semerror { command experror } {
+   global test
+   set subtest "$test -c \"$command\""
+
+   set script "probe process.function(\"foo\") { next }"
+   if {[string length $command]} {
+      eval spawn stap -e {$script} -c {$command}
+   } else {
+      eval spawn stap -e {$script}
+   }
+
+   set failed 1
+   expect {
+      -timeout 20
+      -re "$experror" {
+         set failed 0
+      }
+      eof {
+         fail "$subtest (eof)"
+      }
+      timeout {
+         kill -INT -[exp_pid] 2
+         fail "$subtest (timeout)"
+      }
+   }
+   catch {close}; catch {wait}
+   if {!$failed} {
+      pass "$subtest"
+   }
+}
+
+expect_semerror "" \
+   "semantic error: unspecified process probe is invalid without a -c COMMAND"
+expect_semerror "ls || true" \
+   "semantic error: invalid -c command .* illegal characters"
+expect_semerror "ls \$HOPEFULLYTHISISNTACTUALLYDEFINED" \
+   "semantic error: invalid -c command .* undefined shell variables"
+expect_semerror "ls `out`" \
+   "semantic error: invalid -c command .* contains command substitutions"
+expect_semerror "ls \"string" \
+   "semantic error: invalid -c command .* contains shell syntax errors"
